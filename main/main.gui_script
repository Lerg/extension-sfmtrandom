-- Logging helpers.
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- Button handlers.

local sfmt
local is_fresh = false
local is_32 = false
local function init_pressed(self)
	log('init_pressed')
	if sfmt then
		sfmtrandom.delete(sfmt)
	end
	sfmt = sfmtrandom.init_gen_rand(socket.gettime())
	log(sfmtrandom.get_idstring(sfmt))
	is_fresh = true
	is_32 = false
end

local function init_array_pressed(self)
	log('init_array_pressed')
	if sfmt then
		sfmtrandom.delete(sfmt)
	end
	sfmt = sfmtrandom.init_by_array({1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
	log(sfmtrandom.get_idstring(sfmt))
	is_fresh = true
	is_32 = false
end

local function test1_pressed(self)
	log('test1_pressed')
	plog({
		uint32 = sfmtrandom.genrand_uint32(sfmt),
		real1 = sfmtrandom.genrand_real1(sfmt),
		real2 = sfmtrandom.genrand_real2(sfmt),
		real3 = sfmtrandom.genrand_real3(sfmt),
		res53_mix = sfmtrandom.genrand_res53_mix(sfmt),
		d4 = sfmtrandom.d4(sfmt),
		d6 = sfmtrandom.d6(sfmt),
		d8 = sfmtrandom.d8(sfmt),
		d10 = sfmtrandom.d10(sfmt),
		d12 = sfmtrandom.d12(sfmt),
		d20 = sfmtrandom.d20(sfmt),
		toss = sfmtrandom.toss(sfmt),
		card = sfmtrandom.card(sfmt),
		card2 = {sfmtrandom.card2(sfmt)}
	})
	is_fresh = false
	is_32 = true
end

local function test2_pressed(self)
	log('test2_pressed')
	if is_32 then
		log('Reinitialization is required.')
	else
		uint64_str = sfmtrandom.genrand_uint64(sfmt)
		uint64_hex = ''
		for i = 1, 8 do
			uint64_hex = uint64_hex .. string.format('%02X', string.byte(uint64_str, i))
		end
		plog({
			uint64 = uint64_hex,
			res53 = sfmtrandom.genrand_res53(sfmt)
		})
		is_fresh = false
	end
end

local function test_array1_pressed(self)
	log('test_array1_pressed')
	local min_array_size32 = sfmtrandom.get_min_array_size32(sfmt)
	plog({
		min_array_size32 = min_array_size32
	})
	if not is_fresh then
		log('Reinitialization is required.')
	else
		local size = min_array_size32
		local array_buffer = buffer.create(size, {{name = hash('array'), type = buffer.VALUE_TYPE_UINT32, count = 1}})
		sfmtrandom.fill_array32(sfmt, array_buffer)

		local array_stream = buffer.get_stream(array_buffer, hash('array'))
		local line = {}
		for i = 1, size do
			table.insert(line, array_stream[i])
			if #line == 20 then
				log(table.concat(line, ','))
				line = {}
			end
		end
		log(table.concat(line, ','))
		is_32 = true
	end
end

local function test_array2_pressed(self)
	log('test_array2_pressed')
	local min_array_size64 = sfmtrandom.get_min_array_size64(sfmt)
	plog({
		min_array_size64 = min_array_size64
	})
	if not is_fresh or is_32 then
		log('Reinitialization is required.')
	else
		local size = min_array_size64
		local array_buffer = buffer.create(size, {{name = hash('array'), type = buffer.VALUE_TYPE_UINT64, count = 1}})
		sfmtrandom.fill_array64(sfmt, array_buffer)

		local array_stream = buffer.get_stream(array_buffer, hash('array'))
		local line = {}
		for i = 1, size do
			table.insert(line, array_stream[i])
			if #line == 10 then
				log(table.concat(line, ','))
				line = {}
			end
		end
		log(table.concat(line, ','))
	end
end

local function test3_pressed(self)
	log('test3_pressed')
	local array = {}
	for i = 1, 52 do
		array[i] = i
	end
	sfmtrandom.shuffle(sfmt, array)
	log(table.concat(array, ',', 1, 26))
	log(table.concat(array, ',', 27, 52))
	is_fresh = false
	is_32 = true
end

local function delete_pressed(self)
	log('delete_pressed')
	sfmtrandom.delete(sfmt)
	sfmt = nil
end

-- Show/hide logs view.

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end

-- GUI init.
function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view.
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked.
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_init = init_pressed,
	btn_init_array = init_array_pressed,
	btn_test1 = test1_pressed,
	btn_test2 = test2_pressed,
	btn_test_array1 = test_array1_pressed,
	btn_test_array2 = test_array2_pressed,
	btn_test3 = test3_pressed,
	btn_delete = delete_pressed,
	btn_logs = logs_pressed
}
function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
